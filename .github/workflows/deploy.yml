name: Deploy Uber Demand Forecasting

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.9
      uses: actions/setup-python@v3
      with:
        python-version: 3.9
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run tests
      run: |
        python -m pytest tests/ -v
        
    - name: Generate sample data
      run: |
        python src/data_processing/data_downloader.py
        
    - name: Test API endpoints
      run: |
        python -c "from api.main import app; print('API imports successfully')"
        
    - name: Test Streamlit app
      run: |
        streamlit run app.py --server.headless=true &
        sleep 10
        curl -f http://localhost:8501 || exit 1

  deploy-streamlit-cloud:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Deploy to Streamlit Cloud
      run: |
        echo "Streamlit Cloud auto-deploys from main branch"
        echo "App available at: https://uber-demand-forecasting.streamlit.app"

  deploy-heroku:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Deploy to Heroku
      uses: akhileshns/heroku-deploy@v3.12.12
      with:
        heroku_api_key: ${{secrets.HEROKU_API_KEY}}
        heroku_app_name: "uber-demand-forecasting-demo"
        heroku_email: "your.email@domain.com"
        
  docker-build:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v3
      with:
        context: .
        push: true
        tags: |
          yourusername/uber-demand-forecasting:latest
          yourusername/uber-demand-forecasting:${{ github.sha }}
          
  performance-test:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.9
      uses: actions/setup-python@v3
      with:
        python-version: 3.9
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install locust
        
    - name: Run performance tests
      run: |
        echo "Running performance benchmarks..."
        python -c "
        import time
        import sys
        sys.path.append('src')
        from models.gnn_lstm_model import UberDemandPredictor
        
        predictor = UberDemandPredictor()
        
        # Test prediction speed
        start_time = time.time()
        for i in range(100):
            predictor._heuristic_prediction(41.8781, -87.6298, 
                                          {'hour': 12, 'day_of_week': 1}, {})
        end_time = time.time()
        
        avg_time = (end_time - start_time) / 100
        print(f'Average prediction time: {avg_time:.3f}s')
        
        # Performance requirements
        if avg_time > 2.0:
            print('❌ Performance test failed: >2s response time')
            exit(1)
        else:
            print('✅ Performance test passed: <2s response time')
        "
        
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Run security scan
      uses: pypa/gh-action-pip-audit@v1.0.8
      with:
        inputs: requirements.txt
        
    - name: Run bandit security check
      run: |
        pip install bandit
        bandit -r src/ -f json -o bandit-report.json || true
        
    - name: Upload security report
      uses: actions/upload-artifact@v3
      with:
        name: security-report
        path: bandit-report.json